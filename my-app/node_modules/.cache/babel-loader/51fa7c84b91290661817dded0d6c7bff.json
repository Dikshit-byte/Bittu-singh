{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport All from './All';\nimport Faltu from './Faltu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\n\nconst validateForm = errors => {\n  let valid = true;\n  Object.values(errors).forEach(val => val.length > 0 && (valid = false));\n  return valid;\n};\n\nhandleChange = event => {\n  event.preventDefault();\n  const {\n    name,\n    value\n  } = event.target;\n  let errors = this.state.errors;\n\n  switch (name) {\n    case 'fullName':\n      errors.fullName = value.length < 5 ? 'Full Name must be at least 5 characters long!' : '';\n      break;\n\n    case 'email':\n      errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\n      break;\n\n    case 'password':\n      errors.password = value.length < 8 ? 'Password must be at least 8 characters long!' : '';\n      break;\n\n    default:\n      break;\n  }\n\n  this.setState({\n    errors,\n    [name]: value\n  });\n};\n\nhandleSubmit = event => {\n  event.preventDefault();\n\n  if (validateForm(this.state.errors)) {\n    console.info('Valid Form');\n  } else {\n    console.error('Invalid Form');\n  }\n};\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(All, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this), \",\", /*#__PURE__*/_jsxDEV(Faltu, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this)]\n}, void 0, true), document.getElementById('root'));","map":{"version":3,"sources":["C:/Projects/my-app/src/index.js"],"names":["React","ReactDOM","All","Faltu","validEmailRegex","RegExp","validateForm","errors","valid","Object","values","forEach","val","length","handleChange","event","preventDefault","name","value","target","state","fullName","email","test","password","setState","handleSubmit","console","info","error","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,eAAe,GAAGC,MAAM,CAC1B,wHAD0B,CAA9B;;AAGE,MAAMC,YAAY,GAAGC,MAAM,IAAI;AAC7B,MAAIC,KAAK,GAAG,IAAZ;AACAC,EAAAA,MAAM,CAACC,MAAP,CAAcH,MAAd,EAAsBI,OAAtB,CAA8BC,GAAG,IAAIA,GAAG,CAACC,MAAJ,GAAa,CAAb,KAAmBL,KAAK,GAAG,KAA3B,CAArC;AACA,SAAOA,KAAP;AACD,CAJD;;AAOEM,YAAY,GAAIC,KAAD,IAAW;AACxBA,EAAAA,KAAK,CAACC,cAAN;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBH,KAAK,CAACI,MAA9B;AACA,MAAIZ,MAAM,GAAG,KAAKa,KAAL,CAAWb,MAAxB;;AAEA,UAAQU,IAAR;AACE,SAAK,UAAL;AACEV,MAAAA,MAAM,CAACc,QAAP,GACEH,KAAK,CAACL,MAAN,GAAe,CAAf,GACI,+CADJ,GAEI,EAHN;AAIA;;AACF,SAAK,OAAL;AACEN,MAAAA,MAAM,CAACe,KAAP,GACElB,eAAe,CAACmB,IAAhB,CAAqBL,KAArB,IACI,EADJ,GAEI,qBAHN;AAIA;;AACF,SAAK,UAAL;AACEX,MAAAA,MAAM,CAACiB,QAAP,GACEN,KAAK,CAACL,MAAN,GAAe,CAAf,GACI,8CADJ,GAEI,EAHN;AAIA;;AACF;AACE;AApBJ;;AAuBA,OAAKY,QAAL,CAAc;AAAClB,IAAAA,MAAD;AAAS,KAACU,IAAD,GAAQC;AAAjB,GAAd;AACD,CA7BD;;AA+BAQ,YAAY,GAAIX,KAAD,IAAW;AACxBA,EAAAA,KAAK,CAACC,cAAN;;AACA,MAAGV,YAAY,CAAC,KAAKc,KAAL,CAAWb,MAAZ,CAAf,EAAoC;AAClCoB,IAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACD,GAFD,MAEK;AACHD,IAAAA,OAAO,CAACE,KAAR,CAAc,cAAd;AACD;AACF,CAPD;;AASJ5B,QAAQ,CAAC6B,MAAT,eACI;AAAA,0BACA,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UADA,oBAEA,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,UAFA;AAAA,gBADJ,EAKIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CALJ","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport All from './All';\nimport Faltu from './Faltu';\n\nconst validEmailRegex = RegExp(\n    /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\n  );\n  const validateForm = errors => {\n    let valid = true;\n    Object.values(errors).forEach(val => val.length > 0 && (valid = false));\n    return valid;\n  };\n  \n  \n    handleChange = (event) => {\n      event.preventDefault();\n      const { name, value } = event.target;\n      let errors = this.state.errors;\n  \n      switch (name) {\n        case 'fullName': \n          errors.fullName = \n            value.length < 5\n              ? 'Full Name must be at least 5 characters long!'\n              : '';\n          break;\n        case 'email': \n          errors.email = \n            validEmailRegex.test(value)\n              ? ''\n              : 'Email is not valid!';\n          break;\n        case 'password': \n          errors.password = \n            value.length < 8\n              ? 'Password must be at least 8 characters long!'\n              : '';\n          break;\n        default:\n          break;\n      }\n  \n      this.setState({errors, [name]: value});\n    }\n  \n    handleSubmit = (event) => {\n      event.preventDefault();\n      if(validateForm(this.state.errors)) {\n        console.info('Valid Form')\n      }else{\n        console.error('Invalid Form')\n      }\n    }\n\nReactDOM.render(\n    <>\n    <All/>,\n    <Faltu/>\n    </>,\n    document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}